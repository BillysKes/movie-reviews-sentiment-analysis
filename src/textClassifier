

##nlp project that understands if a movie review is positive or negative and it manages to do it by analyzing natural language
import nltk
from nltk.corpus import movie_reviews
from random import shuffle
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report

nltk.download('stopwords')
nltk.download('punkt')

# Load the movie_reviews dataset
nltk.download("movie_reviews")
documents = [(list(movie_reviews.words(fileid)), category)
for category in movie_reviews.categories()
for fileid in movie_reviews.fileids(category)]
print(movie_reviews.fileids(movie_reviews.categories()))##
exit()
# Shuffle the documents to ensure randomness
shuffle(documents)
'''

# Define a function for text preprocessing
def preprocess_text(text):
    if isinstance(text, list):  # Check if it's a list
        text = " ".join(text)  # Convert the list to a string
    try:
        stop_words = set(stopwords.words("english"))
        words = word_tokenize(text)
        filtered_words = [word.lower() for word in words if word.isalnum() and word.lower() not in stop_words]
        return " ".join(filtered_words)
    except Exception as e:
        print(f"Error processing text: {text}")
        print(str(e))
        return ""  # You can choose to skip problematic entries


# Initialize the CountVectorizer
vectorizer = CountVectorizer()

# Fit and transform the text data
X = vectorizer.fit_transform([preprocess_text(text) for text, _ in documents])

# Labels
y = [category for _, category in documents]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the classifier
classifier = MultinomialNB()

# Train the classifier
classifier.fit(X_train, y_train)


# Make predictions
y_pred = classifier.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

print(f"Accuracy: {accuracy:.2f}")
print(report)
'''
